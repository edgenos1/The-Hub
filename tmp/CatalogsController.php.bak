<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Admin\Catalog\BulkDestroyCatalog;
use App\Http\Requests\Admin\Catalog\DestroyCatalog;
use App\Http\Requests\Admin\Catalog\IndexCatalog;
use App\Http\Requests\Admin\Catalog\StoreCatalog;
use App\Http\Requests\Admin\Catalog\UpdateCatalog;
use App\Models\Catalog;
use Brackets\AdminListing\Facades\AdminListing;
use Exception;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Contracts\Routing\ResponseFactory;
use Illuminate\Contracts\View\Factory;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Response;
use Illuminate\Routing\Redirector;
use Illuminate\Support\Facades\DB;
use Illuminate\View\View;
use Illuminate\Http\Request;

class CatalogsController extends Controller
{

    /**
     * Display a listing of the resource.
     *
     * @param IndexCatalog $request
     * @return array|Factory|View
     */
    public function index(IndexCatalog $request)
    {
        // create and AdminListing instance for a specific model and
        $data = AdminListing::create(Catalog::class)->processRequestAndGet(
            // pass the request with params
            $request,

            // set columns to query
            ['id', 'name','activated', 'itemorder'],

            // set columns to searchIn
            ['id', 'name'],

            function ($query) use ($request) {
                $query->orderBy('itemorder', 'asc')->orderBy('updated_at', 'desc');
            }
        );

        if ($request->ajax()) {
            if ($request->has('bulk')) {
                return [
                    'bulkItems' => $data->pluck('id')
                ];
            }
            return ['data' => $data];
        }

        return view('admin.catalog.index', ['data' => $data]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @throws AuthorizationException
     * @return Factory|View
     */
    public function create()
    {
        $this->authorize('admin.catalog.create');

        return view('admin.catalog.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param StoreCatalog $request
     * @return array|RedirectResponse|Redirector
     */
    public function store(StoreCatalog $request)
    {
        // Sanitize input
        $sanitized = $request->getSanitized();

        // Store the Catalog
        $catalog = Catalog::create($sanitized);

        DB::statement('call sortCatalogs(?,?)', [$catalog->id,1]);

        if ($request->ajax()) {
            return ['redirect' => url('admin/catalogs'), 'message' => trans('brackets/admin-ui::admin.operation.succeeded')];
        }

        return redirect('admin/catalogs');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param Catalog $catalog
     * @throws AuthorizationException
     * @return Factory|View
     */
    public function edit(Catalog $catalog)
    {
        $this->authorize('admin.catalog.edit', $catalog);


        return view('admin.catalog.edit', [
            'catalog' => $catalog,
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param UpdateCatalog $request
     * @param Catalog $catalog
     * @return array|RedirectResponse|Redirector
     */
    public function update(UpdateCatalog $request, Catalog $catalog)
    {
        // Sanitize input
        $sanitized = $request->getSanitized();

        // Update changed values Catalog
        $catalog->update($sanitized);

        if ($request->ajax()) {
            return [
                'redirect' => url('admin/catalogs'),
                'message' => trans('brackets/admin-ui::admin.operation.succeeded'),
            ];
        }

        return redirect('admin/catalogs');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param DestroyCatalog $request
     * @param Catalog $catalog
     * @throws Exception
     * @return ResponseFactory|RedirectResponse|Response
     */
    public function destroy(DestroyCatalog $request, Catalog $catalog)
    {
        $catalog->delete();

        if ($request->ajax()) {
            return response(['message' => trans('brackets/admin-ui::admin.operation.succeeded')]);
        }

        return redirect()->back();
    }

    /**
     * Remove the specified resources from storage.
     *
     * @param BulkDestroyCatalog $request
     * @throws Exception
     * @return Response|bool
     */
    public function bulkDestroy(BulkDestroyCatalog $request) : Response
    {
        DB::transaction(static function () use ($request) {
            collect($request->data['ids'])
                ->chunk(1000)
                ->each(static function ($bulkChunk) {
                    Catalog::whereIn('id', $bulkChunk)->delete();
                });
        });

        return response(['message' => trans('brackets/admin-ui::admin.operation.succeeded')]);
    }

    
    public function itemup(Request $request, Catalog $catalog)
    {
        if($catalog->itemorder!=1){
            DB::statement('call sortCatalogs(?,?)', [$catalog->id, $catalog->itemorder-1]);
            /*
            $catalog->itemorder--;
            $catalog->update([
                'id'=> $catalog->id,
                'itemorder'=> $catalog->itemorder,
            ]);
            */
        }

        if ($request->ajax()) {
            return [
                'redirect' => url('admin/catalogs'),
                'message' => trans('brackets/admin-ui::admin.operation.succeeded'),
            ];
        }
        return redirect()->intended('admin/catalogs');
    }

    public function itemdown(Request $request, Catalog $catalog)
    {
        if($catalog->itemorder<=65500){ //65535
            DB::select('call sortCatalogs(?,?)', [$catalog->id, $catalog->itemorder+1]);
            /*
            $catalog->itemorder++;
            $catalog->update([
                'id'=> $catalog->id,
                'itemorder'=> $catalog->itemorder,
            ]);
            */
        }

        if ($request->ajax()) {
            return [
                'redirect' => url('admin/catalogs'),
                'message' => trans('brackets/admin-ui::admin.operation.succeeded'),
            ];
        }
        return redirect()->intended('admin/catalogs');
    }

}
